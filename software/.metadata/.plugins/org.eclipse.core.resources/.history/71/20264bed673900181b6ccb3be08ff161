// Standard includes
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

// Scheduler includes
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "freertos/semphr.h"

#include <altera_avalon_pio_regs.h>

// Forward declarations
int initOSDataStructs(void);
int initCreateTasks(void);

// Definition of Task Stacks
#define   TASK_STACKSIZE       2048

// Definition of Task Priorities
#define VGA_TASK_PRIORITY 4

// Definition of Queue Sizes
#define HW_DATA_QUEUE_SIZE 100
#define ROC_DATA_QUEUE_SIZE 10

// Definition of Semaphores
SemaphoreHandle_t freq_buffer_sem;

// Definition of Handles
QueueHandle_t HW_dataQ; // contains struct with frequency and calculated ROC

// Global variables
static double old_freq = -1;
static int old_count = 0;

typedef struct {
    double freq;
    double roc;
} freqData;

// ISR
void freq_relay() {
	unsigned int new_count = IORD(FREQUENCY_ANALYSER_BASE, 0);	// number of ADC samples
	double new_freq = 16000/(double)new_count;

	int avg_count = (new_count + old_count) / 2;	// avg number of samples between two readings
	double roc = fabs(((new_freq - old_freq) * 16000)/ avg_count); // must always be positive

	// need two points for roc value, if -1 that means its the first element
	if (old_freq == -1)
    {
		roc = 0;
    }

	if (new_freq == old_freq) { // don't send to queue if its useless data
		return;
	}
	freqData freqMessageToSend = { new_freq, roc };
	if (xQueueSendFromISR(HW_dataQ, &freqMessageToSend, NULL) == pdPASS) {
		printf("Queue send successful\n");
		printf("Frequency sent: %f\n", new_freq);
		printf("ROC sent: %f\n", roc);
	}
	else {
		printf("UNSUCCESSFUL\n");
	}
	old_freq = new_freq;
	old_count = new_count;
}

// VGA_Task
void VGA_Task(void *pvParameters ){
	//initialize VGA controllers
	alt_up_pixel_buffer_dma_dev *pixel_buf;
	pixel_buf = alt_up_pixel_buffer_dma_open_dev(VIDEO_PIXEL_BUFFER_DMA_NAME);
	if(pixel_buf == NULL){
		printf("can't find pixel buffer device\n");
	}
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf, 0);

	alt_up_char_buffer_dev *char_buf;
	char_buf = alt_up_char_buffer_open_dev("/dev/video_character_buffer_with_dma");
	if(char_buf == NULL){
		printf("can't find char buffer device\n");
	}
	alt_up_char_buffer_clear(char_buf);


	//Set up plot axes
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 100, 590, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 50, 200, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buf, 100, 220, 300, ((0x3ff << 20) + (0x3ff << 10) + (0x3ff)), 0);

	alt_up_char_buffer_string(char_buf, "Frequency(Hz)", 4, 4);
	alt_up_char_buffer_string(char_buf, "52", 10, 7);
	alt_up_char_buffer_string(char_buf, "50", 10, 12);
	alt_up_char_buffer_string(char_buf, "48", 10, 17);
	alt_up_char_buffer_string(char_buf, "46", 10, 22);

	alt_up_char_buffer_string(char_buf, "df/dt(Hz/s)", 4, 26);
	alt_up_char_buffer_string(char_buf, "60", 10, 28);
	alt_up_char_buffer_string(char_buf, "30", 10, 30);
	alt_up_char_buffer_string(char_buf, "0", 10, 32);
	alt_up_char_buffer_string(char_buf, "-30", 9, 34);
	alt_up_char_buffer_string(char_buf, "-60", 9, 36);

	alt_up_char_buffer_string(char_buf, "Run Time (HH:MM:SS.m)    = ", 12, 40);
	alt_up_char_buffer_string(char_buf, "Frequency Threshold (Hz) =       (UP/DOWN arrow keys)", 12, 42);
	alt_up_char_buffer_string(char_buf, "RoC Threshold (Hz/s)     =       (LEFT/RIGHT arrow keys)", 12, 44);
	alt_up_char_buffer_string(char_buf, "Reaction Times (ms)      = ", 12, 46);
	alt_up_char_buffer_string(char_buf, "Max Reaction Time (ms)   = ", 12, 48);
	alt_up_char_buffer_string(char_buf, "Min Reaction Time (ms)   = ", 12, 50);
	alt_up_char_buffer_string(char_buf, "Avg Reaction Time (ms)   = ", 12, 52);


	int j = 0;
	Line line_freq, line_roc;

	char temp_buf[6];
	unsigned int milisec;

	const TickType_t task_period = 33;  // 30 Hz
	TickType_t last_wake_time;

	while(1){
		last_wake_time = xTaskGetTickCount();
		vTaskDelayUntil(&last_wake_time, task_period);

		milisec = xTaskGetTickCount();

		sprintf(temp_buf, "%02d:%02d:%02d.%1d", (milisec/3600000) % 24, (milisec/60000) % 60, (milisec/1000) % 60, (milisec/100) % 10);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 40);

		// Read thresholds and print to screen
		sprintf(temp_buf, "%2.1f", freq_threshold);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 42);
		sprintf(temp_buf, "%2.1f ", roc_threshold);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 44);

		sprintf(temp_buf, "%2d, %2d, %2d, %2d, %2d", time_taken[4], time_taken[3], time_taken[2], time_taken[1], time_taken[0]);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 46);
		sprintf(temp_buf, "%2d", max_time);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 48);
		sprintf(temp_buf, "%2d", min_time);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 50);
		sprintf(temp_buf, "%2d", avg_time);
		alt_up_char_buffer_string(char_buf, temp_buf, 40, 52);

		//clear old graph to draw new graph
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 0, 639, 199, 0, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buf, 101, 201, 639, 299, 0, 0);

		// draw threshold lines
		if (freq_threshold > 45.0 && freq_threshold < 52.0){
			alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 101, 590, (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq_threshold - MIN_FREQ)), ((0x100 << 20) + (0x3ff << 10) + 0x100), 0);
		}

		if (roc_threshold < 60.0){
			alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 101, 590, (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * roc_threshold), ((0x100 << 20) + (0x3ff << 10) + 0x100), 0);
			alt_up_pixel_buffer_dma_draw_hline(pixel_buf, 101, 590, (int)(ROCPLT_ORI_Y + ROCPLT_ROC_RES * roc_threshold), ((0x100 << 20) + (0x3ff << 10) + 0x100), 0);
		}

		for(j=0;j<99;++j){ //i here points to the oldest data, j loops through all the data to be drawn on VGA
			if (((int)(freq[(freq_index+j)%100]) > MIN_FREQ) && ((int)(freq[(freq_index+j+1)%100]) > MIN_FREQ)){
				//Calculate coordinates of the two data points to draw a line in between
				//Frequency plot
				line_freq.x1 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * j;
				line_freq.y1 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(freq_index+j)%100] - MIN_FREQ));

				line_freq.x2 = FREQPLT_ORI_X + FREQPLT_GRID_SIZE_X * (j + 1);
				line_freq.y2 = (int)(FREQPLT_ORI_Y - FREQPLT_FREQ_RES * (freq[(freq_index+j+1)%100] - MIN_FREQ));

				//Frequency RoC plot
				line_roc.x1 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * j;
				line_roc.y1 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(freq_index+j)%100]);

				line_roc.x2 = ROCPLT_ORI_X + ROCPLT_GRID_SIZE_X * (j + 1);
				line_roc.y2 = (int)(ROCPLT_ORI_Y - ROCPLT_ROC_RES * dfreq[(freq_index+j+1)%100]);

				//Draw
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_freq.x1, line_freq.y1, line_freq.x2, line_freq.y2, 0x3ff << 0, 0);
				alt_up_pixel_buffer_dma_draw_line(pixel_buf, line_roc.x1, line_roc.y1, line_roc.x2, line_roc.y2, 0x3ff << 0, 0);
			}
		}
	}
}


int initOSDataStructs(void)
{
	HW_dataQ = xQueueCreate(HW_DATA_QUEUE_SIZE, sizeof(struct freqData*));
	freq_buffer_sem = xSemaphoreCreateMutex();
	return 0;
}

int main(int argc, char* argv[], char* envp[])
{
	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, freq_relay);
	initOSDataStructs();
	initCreateTasks();
	vTaskStartScheduler();
	for (;;);

	return 0;
}

int initCreateTasks(void) {
	// 4th arg is to pass to pvParameters
	xTaskCreate(VGA_Task, "VGA_Task", configMINIMAL_STACK_SIZE, NULL, VGA_TASK_PRIORITY, NULL);
	return 0;
}
